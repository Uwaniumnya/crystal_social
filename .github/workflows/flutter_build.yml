name: Flutter Build APK

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build APK on Ubuntu
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: üîç Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v
          
      - name: üì± Install Android SDK components
        run: |
          # Ensure Android SDK components are installed
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" || true

      - name: üì± Accept Android SDK licenses
        run: |
          # Set up Android SDK environment
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Accept all licenses
          yes | sdkmanager --licenses 2>/dev/null || true
          yes | flutter doctor --android-licenses 2>/dev/null || true
          
          # Verify setup
          flutter doctor -v

      - name: üßº Clean
        run: flutter clean

      - name: üìö Get Dependencies
        run: flutter pub get

      - name: üèóÔ∏è Build APK
        run: flutter build apk --release --target-platform android-arm64 

      - name: üîñ Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | xargs)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üì§ Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Crystal Social v${{ steps.version.outputs.version }}
          files: build/app/outputs/flutter-apk/app-release.apk
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì® Send to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -n "$DISCORD_WEBHOOK" ]; then
            VERSION="${{ steps.version.outputs.version }}"
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            
            # Get APK file size in MB
            APK_SIZE=$(du -m build/app/outputs/flutter-apk/app-release.apk | cut -f1)
            
            # Send notification with download link (no file attachment due to size limits)
            curl -H "Content-Type: application/json" \
                 -d "{
                   \"embeds\": [{
                     \"title\": \"‚ú® New Crystal Social APK Released!\",
                     \"description\": \"üéâ A new version of **Crystal Social** has been built and released!\",
                     \"color\": 5814783,
                     \"fields\": [
                       {\"name\": \"üì± Version\", \"value\": \"$VERSION\", \"inline\": true},
                       {\"name\": \"üìè Size\", \"value\": \"${APK_SIZE}MB\", \"inline\": true},
                       {\"name\": \"üïí Built at\", \"value\": \"$TIMESTAMP\", \"inline\": true},
                       {\"name\": \"ÔøΩ Download\", \"value\": \"[üì± Download APK from GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)\", \"inline\": false}
                     ],
                     \"footer\": {\"text\": \"Crystal Social CI/CD\"},
                     \"thumbnail\": {\"url\": \"https://github.com/fluidicon.png\"}
                   }]
                 }" \
                 $DISCORD_WEBHOOK
          else
            echo "Discord webhook not configured, skipping notification"
          fi
